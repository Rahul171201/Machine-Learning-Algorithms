# -*- coding: utf-8 -*-
"""K-Means-Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l7SDNlTtOSdllc7QLAN1HEqj76k5d3K0
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math

df = pd.DataFrame({
    'x' : [13, 12, 19, 39, 14, 59, 46, 29, 17, 12, 18, 90, 15, 17, 38],
    'y' : [24, 12, 15, 16, 29, 26, 37, 49, 45, 36, 17, 38, 49, 57, 78]
})

np.random.seed(204)
k = 3
# centroid[i] = [x, y]
centroid = []
for i in range(k+1):
  centroid.append(0)
for i in range(k):
  centroid[i+1] = [np.random.randint(0,80), np.random.randint(0,80)]
  print(centroid[i+1])

fig = plt.figure(figsize=(5,5))
plt.scatter(df['x'], df['y'], color = 'k')
colormap = {1 : 'r' , 2 : 'g', 3 : 'b'}
for i in range(1,4):
  plt.scatter(centroid[i][0], centroid[i][1], color = colormap[i])

plt.show()

from numpy.ma.core import sqrt
mean = []
count = []
for i in range(4):
  mean.append(centroid[i])
  count.append(1)

index = []
for i in range(len(df['x'])):
  index.append(0)

for i in range(len(df['x'])):
  mindis = 100000000.00
  for j in range(1,4):
    dis = math.sqrt(((mean[j][0] - df['x'][i])*(mean[j][0] - df['x'][i])) + ((mean[j][1] - df['y'][i])*(mean[j][1] - df['y'][i])))
    if(dis < mindis):
      index[i] = j
      mindis = dis
  sum_x = mean[index[i]][0]*count[index[i]]
  sum_y = mean[index[i]][1]*count[index[i]]
  count[index[i]] = count[index[i]] + 1
  mean[index[i]][0] = (sum_x + df['x'][i])/(count[index[i]])
  mean[index[i]][1] = (sum_y + df['y'][i])/(count[index[i]])

fig1 = plt.figure(figsize=(5,5))
for i in range(len(df['x'])):
  plt.scatter(df['x'][i], df['y'][i], color = colormap[index[i]])
for i in range(1,4):
  plt.scatter(centroid[i][0], centroid[i][1], color = colormap[i])

plt.show()